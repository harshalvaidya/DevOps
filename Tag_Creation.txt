#!/bin/bash
#: <<'end_long_comment'
echo "BEFORE: $TMPDIR"
export TMPDIR="/u01/tmp"
echo "AFTER: $TMPDIR"

SVNPath=/usr/bin/svn;

# Storing the list of the Release Folders in the ReleaseFolderList.xml to fetch the latest folder.
cd ${LocalFolderLocation};
wget -q -O ${LocalFolderLocation}/ReleaseFolderList.xml --user=${SVN_Username} --password=${SVN_Password} "${SVN_Location}/" --no-check-certificate;
ReleaseList=`echo "cat svn/index/dir/@name" | xmllint --nocdata --shell "${LocalFolderLocation}/ReleaseFolderList.xml" | grep ${ReleaseFolderPrefix} | sed -e 's/-------/ /g' -e 's/name=//g' -e 's/\"/ /g'`;
#MODIFIED FOR SVN TAG
#ReleaseListLength=`echo ${ReleaseList} | awk '{ print NF }'`;
##echo "ReleaseList: ${ReleaseList}";
#echo "ReleaseListLength: ${ReleaseListLength}"

##Fetching the latest Release folder number.
#MaxReleaseNumber=0;
#for(( i=1; i<=${ReleaseListLength}; i++ ));
#do
#	ReleaseLength=`echo ${ReleaseList} | cut -f$i -d' ' | awk -F'_' '{ print $2 }' | sed 's/[a-zA-Z]//g'`;
#	if [[ "${ReleaseLength}" > "${MaxReleaseNumber}" ]]; then
#        MaxReleaseNumber=${ReleaseLength};
#    fi
#done
#echo "MaxReleaseNumber: ${MaxReleaseNumber}";

#Fetching the latest rev num, counter value and hot-fix value deployed.
#LatestModifiedSVNFolder="${SVN_Location}/${ReleaseFolderPrefix}_R${MaxReleaseNumber}";

MaxMainRelease=0
MaxSubRelease=0
for i in ${ReleaseList}
do
MainRelease=`echo ${i} | cut -d'-' -f3 | awk -F'_' '{ print $1 }' | sed 's/[a-zA-Z]//g'`
        if [[ "${MainRelease}" > "${MaxMainRelease}" ]]; then
                SubReleaseList=`echo "cat svn/index/dir/@name" | xmllint --nocdata --shell "ReleaseFolderList.xml" | grep ZM-Siebel-R${MainRelease}_* | sed -e 's/-------/ /g' -e 's/name=//g' -e 's/\"/ /g'`

                        for j in ${SubReleaseList}
                        do
                                SubRelease=`echo ${j} | cut -d'-' -f3 | awk -F'_' '{ print $2 }' | sed 's/[a-zA-Z]//g'`
                                if [[ "${SubRelease}" != "" ]]; then

                                MaxMainRelease=${MainRelease}
                                 MaxSubRelease=0
                                if [[ "${SubRelease}" > "${MaxSubRelease}" ]]; then
                                        MaxSubRelease=${SubRelease}
                                fi
                                fi
                done
    fi
done
echo "#########################"
echo "Latest Repository Name: ZM-Siebel-R${MaxMainRelease}_${MaxSubRelease}"
echo "#########################"
#LatestModifiedSVNFolder="${SVN_Location}/${ReleaseFolderPrefix}_R${MaxMainRelease}_${MaxSubRelease}";
LatestModifiedSVNFolder="${SVN_Location}/ZM-Siebel-R${MaxMainRelease}_${MaxSubRelease}";
#MODIFIED FOR SVN TAG END
echo "#########################"
echo "LatestModifiedSVNFolder: ${LatestModifiedSVNFolder}";
echo "#########################"

LatestFolder=`${SVNPath} ls -v --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/tags/${ENV}" | sort -rn | grep ${ENV} | awk '{ print $6 }' | head -1`;

if [ ! -z ${LatestFolder} ]; then
	echo "LatestFolder: ${LatestFolder}";
    #Rel_Number=`echo ${LatestFolder} | awk -F'_' '{ print $3 }' | awk -F'.' '{ print $1 }' | sed 's/[a-zA-Z]//g'`;
    Main_Rel_Number=`echo ${LatestFolder} | awk -F'_' '{ print $3 }' | awk -F'.' '{ print $1 }' | sed 's/[a-zA-Z]//g'`;
    Sub_Rel_Number=`echo ${LatestFolder} | awk -F'_' '{ print $4 }' | awk -F'.' '{ print $1 }' | sed 's/[a-zA-Z]//g'`;
    
    Rel_Number="${Main_Rel_Number}_${Sub_Rel_Number}"
    
    echo "Rel_Number: ${Rel_Number}";
    Rev_Number=`echo ${LatestFolder} | awk -F'_' '{ print $2 }' | sed 's/[a-zA-Z]//g'`;
    echo "Rev_Number: ${Rev_Number}"
    #Counter=`echo ${LatestFolder} | awk -F'_' '{ print $3 }' | awk -F'.' '{ print $2 }' | sed 's/[a-zA-Z]//g'`;
    #HotFix=`echo ${LatestFolder} | awk -F'_' '{ print $3 }' | awk -F'.' '{ print $3 }' | sed 's/[a-zA-Z/]//g'`;
    Counter=`echo ${LatestFolder} | awk -F'_' '{ print $4 }' | awk -F'.' '{ print $2 }' | sed 's/[a-zA-Z]//g'`;
    HotFix=`echo ${LatestFolder} | awk -F'_' '{ print $4 }' | awk -F'.' '{ print $3 }' | sed 's/[a-zA-Z/]//g'`;
    echo "HotFix: ${HotFix}";

    Counter=$(( 10#${Counter}+1 ));
    if [ "${Counter}" -lt "10" ]; then
        Counter="0${Counter}";
    fi
    echo "Counter: ${Counter}"
else
	echo "No Folder present. Creating the first folder";
	#Rel_Number=${MaxReleaseNumber};
    Rel_Number=${MaxMainRelease}_${MaxSubRelease};
    Rev_Number=`${SVNPath} log -r 1:HEAD --limit 1 --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/trunk/NonRepository" | grep "1 line" | awk -F'|' '{ print $1 }' | sed 's/[a-zA-Z[:blank:]]//g'`;
    Counter="01";
    HotFix="00";
fi

LastRevision=`${SVNPath} info --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/trunk/NonRepository"`;
NewFolderRevisionNumber=`echo "${LastRevision}" | grep "Revision" | awk '{ print $2}'`;
echo "NewFolderRevisionNumber: ${NewFolderRevisionNumber}";

#Release="${ReleaseFolderPrefix}_R${Rel_Number}";

Release="ZM-Siebel-R${Rel_Number}";

NewFolderName="${ENV}_rev${NewFolderRevisionNumber}_R${Rel_Number}.${Counter}.${HotFix}";
echo "NewFolderName to be created: ${NewFolderName}";

#Checking if the Folder already exists. If so, increase the counter value and create a new folder name.
CheckNewFolderNameExists=`${SVNPath} ls --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVN_Location}/${Release}/tags/${ENV}/${NewFolderName}"`;
if [ ! -z "${CheckNewFolderNameExists}" ]; then
	echo "Path exists. Creating New Foldername with increased counter";
    #${SVNPath} del --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${CopyToSVNPath}" -m "Deleting the directory if it already exists";
    Counter=$(( 10#${Counter}+1 ));
    echo "New Counter: ${Counter}"
    if [ "${Counter}" -lt "10" ]; then
        Counter="0${Counter}";
    fi
    echo "Counter: ${Counter}"
    NewFolderName="${ENV}_rev${NewFolderRevisionNumber}_R${Rel_Number}.${Counter}.${HotFix}";
    echo "NewFolderName to be created: ${NewFolderName}";
fi

# Creating the SVN Folder structure to check in the added/modified files
	SRFDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/SRF;
	DataMigrationDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/DataMigration;
	ReleaseNotesDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/ReleaseNotes;
	RepositoryDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/Repository;
	NonRepositoryDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/NonRepository;
		
	# Creating the mandatory folders
	if [ ! -d "${SRFDirectory}" ]; then
		mkdir -p ${SRFDirectory};
		echo "Created SRF Directory"
	fi

	if [ ! -d "${DataMigrationDirectory}" ]; then
		mkdir -p ${DataMigrationDirectory};
		echo "Created DataMigration Directory"
	fi

	if [ ! -d "${ReleaseNotesDirectory}" ]; then
		mkdir -p ${ReleaseNotesDirectory};
		echo "Created ReleaseNotes Directory"
	fi

	if [ ! -d "${RepositoryDirectory}" ]; then
		mkdir -p ${RepositoryDirectory};
		echo "Created Repository Directory"
	fi

	if [ ! -d "${NonRepositoryDirectory}" ]; then
		mkdir -p ${NonRepositoryDirectory};
		echo "Created NonRepository Directory"
	fi

# Copying the repository items in the trunk folder

SRFFileList=`${SVNPath} ls --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVN_Repo_Items_Location}/SRF"`;
RepoFileList=`${SVNPath} ls --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVN_Repo_Items_Location}/Repository"`;

SRFFileListLen=`echo ${SRFFileList} | awk '{ print NF }'`;
RepoFileListLen=`echo ${RepoFileList} | awk '{ print NF }'`;

if [ ${SRFFileListLen} ]; then
    if [ "${SRFFileListLen}" -gt "0" ]; then
    	# Checking out the SRF folder from trunk on a temp location
        cd "${LocalFolderLocation}";
    	${SVNPath} co --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/trunk/SRF"
        #${SVNPath} co --username=${SVN_Username} --password=${SVN_Password} "https://w0261.kpnnl.local:8443/svn/ARA_ZM/tags/ARA_OTA/Siebel_ZM/tags/SIT2/SIT2_rev181_R31.12.01/SRF"
        echo "Copying the SRF files on local folder and commiting in trunk";
        for(( i=1; i<=${SRFFileListLen}; i++ ));
        do
        	cd "${SRFDirectory}";
            SRFFile=`echo ${SRFFileList} | cut -f$i -d ' '`;
            ${SVNPath} export --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVN_Repo_Items_Location}/SRF/${SRFFile}"
            cp "${SRFDirectory}/${SRFFile}" "${LocalFolderLocation}/SRF";
            cd "${LocalFolderLocation}/SRF";
            ${SVNPath} add ${SRFFile};
        done
        cd "${LocalFolderLocation}/SRF";
        # Commiting the new file in trunk
        ${SVNPath} ci --username=${SVN_Username} --password=${SVN_Password} . -m "Adding the files to the SRF trunk"
        echo "SRF Files copied and commited in trunk"
        rm -rf "${LocalFolderLocation}/SRF"
    else
        echo "No SRF Files to copy"
    fi
else
	echo "No SRF Files to copy"
fi

if [ ${RepoFileListLen} ]; then
    if [ "${RepoFileListLen}" -gt "0" ]; then
        # Checking out the Repository folder from trunk on a temp location
        cd "${LocalFolderLocation}";
    	${SVNPath} co --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/trunk/Repository"
        #${SVNPath} co --username=${SVN_Username} --password=${SVN_Password} "https://w0261.kpnnl.local:8443/svn/ARA_ZM/tags/ARA_OTA/Siebel_ZM/tags/SIT2/SIT2_rev181_R31.12.01/Repository"
        echo "Copying the Repo files on local folder";
        for(( i=1; i<=${RepoFileListLen}; i++ ));
        do
        	cd "${RepositoryDirectory}";
            RepoFile=`echo ${RepoFileList} | cut -f$i -d ' '`;
            ${SVNPath} export --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVN_Repo_Items_Location}/Repository/${RepoFile}"
            cp "${RepositoryDirectory}/${RepoFile}" "${LocalFolderLocation}/Repository";
            cd "${LocalFolderLocation}/Repository";
            ${SVNPath} add ${RepoFile};
        done
        cd "${LocalFolderLocation}/Repository";
        # Commiting the new file in trunk
        ${SVNPath} ci --username=${SVN_Username} --password=${SVN_Password} . -m "Adding the files to the Repository trunk"
        echo "Repository Files copied and commited in trunk"
        rm -rf "${LocalFolderLocation}/Repository"
    else
        echo "No Repo Files to copy"
    fi
else
    echo "No Repo Files to copy"
fi

cd "${LocalFolderLocation}";

${SVNPath} diff -r ${Rev_Number}:head --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${LatestModifiedSVNFolder}/trunk" --summarize | grep "^A\|^M"> ${LocalFolderLocation}/FileList.xml;
#FileList=`more FileList.xml | sed 's/A      //g' | sed 's/M      //g' | tr '\n' ';'`;
FileList=`more ${LocalFolderLocation}/FileList.xml | sed 's/A      //g' | sed 's/M       //g' | tr '\n' ';'`;

Len=`echo ${FileList} | awk -F';' '{ print NF }'`;
echo "Len: ${Len}";

if [ "$((${Len}-1))" -gt "0" ]; then
	echo "Total Files to be copied:" $((${Len}-1));

	# Creating the modified folders for the Non Repository Items. Also, checking out the empty SVN directory structure from where the files are to be copied
	for(( i=1; i<${Len}; i++ ));
	do	
		CreateDirectory=${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}/;
		TempDIR=`echo ${FileList} | cut -f$i -d ';'`;
		TempDIRLen=`echo ${TempDIR} | awk -F'/' '{ print NF }'`;
		SVNFolderCheckout="";
		CheckCommand=0;
		echo "TempDIR: ${TempDIR}";
		echo "TempDIRLen: ${TempDIRLen}";
		for(( j=1; j<${TempDIRLen}; j++ ));
		do
			tempFolderName=`echo ${TempDIR} | cut -f$j -d '/'`;
			if [ "${tempFolderName}" == "trunk" ]; then
				CheckCommand=1;
			fi
			if [[ ${CheckCommand} -eq 1 && "${tempFolderName}" != "trunk" ]]; then
				CreateDirectory="${CreateDirectory}""${tempFolderName}""/";
			fi
			SVNFolderCheckout="${SVNFolderCheckout}""${tempFolderName}""/";
		done
		echo "SVNFolderCheckout:" "${SVNFolderCheckout}"
		if [ ! -d "${CreateDirectory}" ]; then
				mkdir -p "${CreateDirectory}";
				echo "Directory (${CreateDirectory}) created"
			else
				echo "Directory ("${CreateDirectory}") already present."
		fi
		echo "CreateDirectory :" "${CreateDirectory}";
		echo "-------------------";
		
		fileName=`echo ${TempDIR} | awk -F'/' '{ print $NF }'`;	
		if [[ "${fileName}" == *"."* ]]; then
			echo "fileName: ${fileName}";
			cd "${CreateDirectory}";	
			${SVNPath} export --non-interactive --force --username=${SVN_Username} --password=${SVN_Password} "${TempDIR}";
		fi
		#${SVNPath} co --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${SVNFolderCheckout}" "${CreateDirectory}";
		echo "-------------------";
	done
	CopyFromFolder="${LocalFolderLocation}/svn/${Release}/tags/${ENV}/${NewFolderName}";
	CopyToSVNPath="${SVN_Location}/${Release}/tags/${ENV}/${NewFolderName}";
	#CopyToSVNPath="${SVN_Location}/ARA_ZM/tags/ARA_OTA/Siebel_ZM/tags/${ENV}/${NewFolderName}";
	echo "Checking if the path is already existing";
	CheckPathExistingBeforeImport=`${SVNPath} ls --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${CopyToSVNPath}"`;
	if [ ! -z "${CheckPathExistingBeforeImport}" ]; then
		echo "Path exists";
        ${SVNPath} del --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${CopyToSVNPath}" -m "Deleting the directory if it already exists";
	fi
	echo "Importing the the files";
	${SVNPath} import --username=${SVN_Username} --password=${SVN_Password} "${CopyFromFolder}" "${CopyToSVNPath}" -m "Importing the files";
	echo "Checking if the import is successful";
	CheckPathExistingAfterImport=`${SVNPath} ls --non-interactive --username=${SVN_Username} --password=${SVN_Password} "${CopyToSVNPath}"`;
	if [ ! -z "${CheckPathExistingAfterImport}" ]; then
		echo "Import Successful";
        #rm -rf ${LocalFolderLocation}/svn;
        #rm -f ${LocalFolderLocation}/FileList.xml ${LocalFolderLocation}/ReleaseFolderList.xml;
        ls ${LocalFolderLocation}
        echo SVN_PKG_NAME=${NewFolderName} >> /u01/app/Cordys/Automation/ARA11.X/${ENV}/envvars;
        echo SVN_PKG_URL=${CopyToSVNPath} >> /u01/app/Cordys/Automation/ARA11.X/${ENV}/envvars;
        echo FileListLocation=${LocalFolderLocation}/FileList.xml >> /u01/app/Cordys/Automation/ARA11.X/${ENV}/envvars;
	else
		echo "FAILURE: Import Failed";
	fi
else
	echo "No Files to deploy"
fi

#end_long_comment